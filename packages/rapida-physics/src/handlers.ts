import { handleAddBodies } from './events/body/add-bodies';
import { handleApplyForce } from './events/body/apply-force';
import { handleApplyImpulse } from './events/body/apply-impulse';
import { handleApplyLocalImpulse } from './events/body/apply-local-impulse';
import { handleApplyTorque } from './events/body/apply-torque';
import { handleApplyLocalForce } from './events/body/handle-apply-local-force';
import { handleRemoveBodies } from './events/body/remove-bodies';
import { handleSetAllowSleep } from './events/body/set-allow-sleep';
import { handleSetAngularDamping } from './events/body/set-angular-damping';
import { handleSetAngularFactor } from './events/body/set-angular-factor';
import { handleSetAngularVelocity } from './events/body/set-angular-velocity';
import { handleSetCollisionFilterGroup } from './events/body/set-collision-filter-group';
import { handleSetCollisionFilterMask } from './events/body/set-collision-filter-mask';
import { handleSetCollisionResponse } from './events/body/set-collision-response';
import { handleSetFixedRotation } from './events/body/set-fixed-rotation';
import { handleSetIsTrigger } from './events/body/set-is-trigger';
import { handleSetLinearDamping } from './events/body/set-linear-damping';
import { handleSetMass } from './events/body/set-mass';
import { handleSetPosition } from './events/body/set-position';
import { handleSetQuaternion } from './events/body/set-quaternion';
import { handleSetSleepSpeedLimit } from './events/body/set-sleep-speed-limit';
import { handleSetSleepTimeLimit } from './events/body/set-sleep-time-limit';
import { handleSetVelocity } from './events/body/set-velocity';
import { handleWakeUp } from './events/body/wake-up';
import { handleAddConstraint } from './events/constraint/add-constraint';
import { handleDisableConstraint } from './events/constraint/disable-constraint';
import { handleDisableConstraintMotor } from './events/constraint/disable-constraint-motor';
import { handleEnableConstraint } from './events/constraint/enable-constraint';
import { handleEnableConstraintMotor } from './events/constraint/enable-constraint-motor';
import { handleRemoveConstraint } from './events/constraint/remove-constraint';
import { handleSetConstraintMotorMaxForce } from './events/constraint/set-constraint-motor-max-force';
import { handleSetConstraintMotorSpeed } from './events/constraint/set-constraint-motor-speed';
import { PhysicsEventTopic } from './events/physics-event-topic';
import { handleAddRay } from './events/ray/add-ray';
import { handleRemoveRay } from './events/ray/remove-ray';
import { handleAddSpring } from './events/spring/add-spring';
import { handleRemoveSpring } from './events/spring/remove-spring';
import { handleSetSpringDamping } from './events/spring/set-spring-damping';
import { handleSetSpringRestLength } from './events/spring/set-spring-rest-length';
import { handleSetSpringStiffness } from './events/spring/set-spring-stiffness';
import { handleSubscribe } from './events/subscribe';
import { handleUnsubscribe } from './events/unsubscribe';
import { handleAddRaycastVehicle } from './events/vehicle/add-raycast-vehicle';
import { handleApplyRaycastVehicleEngineForce } from './events/vehicle/apply-raycast-vehicle-engine-force';
import { handleRemoveRaycastVehicle } from './events/vehicle/remove-raycast-vehicle';
import { handleSetRaycastVehicleBrake } from './events/vehicle/set-raycast-vehicle-brake';
import { handleSetRaycastVehicleSteeringValue } from './events/vehicle/set-raycast-vehicle-steering-value';
import { handleSetAxisIndex } from './events/world/set-axis-index';
import { handleSetBroadphase } from './events/world/set-broadphase';
import { handleSetDefaultContactMaterial } from './events/world/set-default-contact-material';
import { handleSetGravity } from './events/world/set-gravity';
import { handleSetIterations } from './events/world/set-iterations';
import { handleSetTolerance } from './events/world/set-tolerance';
import { State } from './state';

export type PhysicsEventData = {
  topic: PhysicsEventTopic;
};

const handlers: { [eventName: string]: (e: any, state: State) => void } = {};

handlers[PhysicsEventTopic.ADD_BODIES] = handleAddBodies;
handlers[PhysicsEventTopic.REMOVE_BODIES] = handleRemoveBodies;
handlers[PhysicsEventTopic.SUBSCRIBE] = handleSubscribe;
handlers[PhysicsEventTopic.UNSUBSCRIBE] = handleUnsubscribe;
handlers[PhysicsEventTopic.SET_POSITION] = handleSetPosition;
handlers[PhysicsEventTopic.SET_QUATERNION] = handleSetQuaternion;
handlers[PhysicsEventTopic.SET_VELOCITY] = handleSetVelocity;
handlers[PhysicsEventTopic.SET_ANGULAR_VELOCITY] = handleSetAngularVelocity;
handlers[PhysicsEventTopic.SET_ANGULAR_FACTOR] = handleSetAngularFactor;
handlers[PhysicsEventTopic.SET_MASS] = handleSetMass;
handlers[PhysicsEventTopic.SET_LINEAR_DAMPING] = handleSetLinearDamping;
handlers[PhysicsEventTopic.SET_ANGULAR_DAMPING] = handleSetAngularDamping;
handlers[PhysicsEventTopic.SET_ALLOW_SLEEP] = handleSetAllowSleep;
handlers[PhysicsEventTopic.SET_SLEEP_SPEED_LIMIT] = handleSetSleepSpeedLimit;
handlers[PhysicsEventTopic.SET_SLEEP_TIME_LIMIT] = handleSetSleepTimeLimit;
handlers[PhysicsEventTopic.SET_COLLISION_FILTER_GROUP] = handleSetCollisionFilterGroup;
handlers[PhysicsEventTopic.SET_COLLISION_FILTER_MASK] = handleSetCollisionFilterMask;
handlers[PhysicsEventTopic.SET_COLLISION_RESPONSE] = handleSetCollisionResponse;
handlers[PhysicsEventTopic.SET_FIXED_ROTATION] = handleSetFixedRotation;
handlers[PhysicsEventTopic.SET_IS_TRIGGER] = handleSetIsTrigger;
handlers[PhysicsEventTopic.SET_GRAVITY] = handleSetGravity;
handlers[PhysicsEventTopic.SET_TOLERANCE] = handleSetTolerance;
handlers[PhysicsEventTopic.SET_DEFAULT_CONTACT_MATERIAL] = handleSetDefaultContactMaterial;
handlers[PhysicsEventTopic.SET_ITERATIONS] = handleSetIterations;
handlers[PhysicsEventTopic.SET_BROADPHASE] = handleSetBroadphase;
handlers[PhysicsEventTopic.SET_AXIS_INDEX] = handleSetAxisIndex;
handlers[PhysicsEventTopic.APPLY_FORCE] = handleApplyForce;
handlers[PhysicsEventTopic.APPLY_IMPULSE] = handleApplyImpulse;
handlers[PhysicsEventTopic.APPLY_LOCAL_FORCE] = handleApplyLocalForce;
handlers[PhysicsEventTopic.APPLY_LOCAL_IMPULSE] = handleApplyLocalImpulse;
handlers[PhysicsEventTopic.APPLY_TORQUE] = handleApplyTorque;
handlers[PhysicsEventTopic.ADD_CONSTRAINT] = handleAddConstraint;
handlers[PhysicsEventTopic.REMOVE_CONSTRAINT] = handleRemoveConstraint;
handlers[PhysicsEventTopic.ENABLE_CONSTRAINT] = handleEnableConstraint;
handlers[PhysicsEventTopic.DISABLE_CONSTRAINT] = handleDisableConstraint;
handlers[PhysicsEventTopic.ENABLE_CONSTRAINT_MOTOR] = handleEnableConstraintMotor;
handlers[PhysicsEventTopic.DISABLE_CONSTRAINT_MOTOR] = handleDisableConstraintMotor;
handlers[PhysicsEventTopic.SET_CONSTRAINT_MOTOR_SPEED] = handleSetConstraintMotorSpeed;
handlers[PhysicsEventTopic.SET_CONSTRAINT_MOTOR_MAX_FORCE] = handleSetConstraintMotorMaxForce;
handlers[PhysicsEventTopic.ADD_SPRING] = handleAddSpring;
handlers[PhysicsEventTopic.SET_SPRING_STIFFNESS] = handleSetSpringStiffness;
handlers[PhysicsEventTopic.SET_SPRING_REST_LENGTH] = handleSetSpringRestLength;
handlers[PhysicsEventTopic.SET_SPRING_DAMPING] = handleSetSpringDamping;
handlers[PhysicsEventTopic.REMOVE_SPRING] = handleRemoveSpring;
handlers[PhysicsEventTopic.ADD_RAY] = handleAddRay;
handlers[PhysicsEventTopic.REMOVE_RAY] = handleRemoveRay;
handlers[PhysicsEventTopic.ADD_RAYCAST_VEHICLE] = handleAddRaycastVehicle;
handlers[PhysicsEventTopic.REMOVE_RAYCAST_VEHICLE] = handleRemoveRaycastVehicle;
handlers[PhysicsEventTopic.SET_RAYCAST_VEHICLE_STEERING_VALUE] = handleSetRaycastVehicleSteeringValue;
handlers[PhysicsEventTopic.APPLY_RAYCAST_VEHICLE_ENGINE_FORCE] = handleApplyRaycastVehicleEngineForce;
handlers[PhysicsEventTopic.SET_RAYCAST_VEHICLE_BRAKE] = handleSetRaycastVehicleBrake;
handlers[PhysicsEventTopic.WAKE_UP] = handleWakeUp;

export default handlers;
